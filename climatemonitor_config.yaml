template:
  - sensor:
    - name: climatemonitor_template_installed_config_version
      state: 1.0.2
  - binary_sensor:
    - name: climatemonitor_template_config_version_uptodate
      state: >
        {% set latest = states('sensor.climatemonitor_template_latest_config_version') %}
        {% set installed = states('sensor.climatemonitor_template_installed_config_version') %}
        {{ latest != 'unknown' and installed != 'unknown' and latest == installed }}
      device_class: update
  # Check if temperature is within range. When temperature is unavailable, this value is set to false. The sensor becomes true after some delay.
  - binary_sensor:
    - name: climatemonitor_template_temperature_outside_threshold_flag
      delay_on: >
       {% set delayOn = states('input_number.climatemonitor_template_temperature_alarm_notification_delay') | int(0) %}
         {{delayOn}}
      state: >
        {% set current_temp = states('sensor.climatemonitor_template_temperature') %}
        {% set low_temp_th = states('input_number.climatemonitor_template_low_temperature_threshold') | float(0) %}
        {% set high_temp_th = states('input_number.climatemonitor_template_high_temperature_threshold') | float(0) %}
        {% if current_temp in ['unavailable', 'unknown', 'none'] %}
          False
        {% else %}
          {% set current_temp = current_temp | float %}
          {% if current_temp > low_temp_th and current_temp < high_temp_th %}
            False
          {% else %}
            True
          {% endif %}
        {% endif %}
  - sensor:
      - name: climatemonitor_template_last_update
        unit_of_measurement: "s"
        state: "{{ (as_timestamp(now()) - as_timestamp(states.sensor.climatemonitor_template_temperature.last_updated)) | float | round(0) }}"
      - unique_id: climatemonitor_template_alarm
        state: >
          {% set current_temp = states('sensor.climatemonitor_template_temperature') %}
          {% set last_update = states('sensor.climatemonitor_template_last_update') | float %}
          {% set noResponse = last_update > 300 %}
          {% if current_temp in ['unavailable', 'unknown', 'none'] and noResponse %}
            Connection lost
          {% else %}
            {% set temperature_alarm = states('binary_sensor.climatemonitor_template_temperature_outside_threshold_flag') | bool %}
            {% if noResponse %}
              Connection lost
            {% elif temperature_alarm %}
              Temperature alert
            {% else %}
              Off
            {% endif %}
          {% endif %}
        attributes:
          friendly_name: "{{ states('input_text.climatemonitor_template_name') }}"
          group:  "{{ states('input_text.climatemonitor_template_group') }}"
          location: "{{ states('input_text.climatemonitor_template_location') }}"
          low_temperature_threshold: "{{ states('input_number.climatemonitor_template_low_temperature_threshold') }}"
          high_temperature_threshold: "{{ states('input_number.climatemonitor_template_high_temperature_threshold') }}"
          temperature_alarm_notification_delay: "{{ states('input_number.climatemonitor_template_temperature_alarm_notification_delay') }}"
command_line:
- sensor:
      name: "climatemonitor_template_latest_config_version"
      command: >
        wget -qO- https://raw.githubusercontent.com/DelQueso/climatemonitor/refs/heads/main/climatemonitor_config.yaml |
        grep 'state:' | head -n 1 | cut -d':' -f2 | xargs
      scan_interval: 30
      value_template: "{{ value }}"
input_boolean:
  climatemonitor_template_report_temperature:
    name: "Report Temperature"
    icon: mdi:checkbox-marked  
    initial: true
  climatemonitor_template_report_humidity:
    name: "Report Humidity"
    icon: mdi:checkbox-marked  
    initial: true
input_number:
  climatemonitor_template_low_temperature_threshold:
    name: Low Temperature Threshold
    mode: box
    min: -100
    max: 100
    step: 1
    unit_of_measurement: "°C"
  climatemonitor_template_high_temperature_threshold:
    name: High Temperature Threshold
    mode: box
    min: -100
    max: 100
    step: 1
    unit_of_measurement: "°C"
  climatemonitor_template_temperature_alarm_notification_delay:
    name: Temperature Alarm Notification Delay
    mode: box
    min: 0
    max: 3600
    step: 1
    unit_of_measurement: "s"
input_text:
  climatemonitor_template_name:
  climatemonitor_template_group:
  climatemonitor_template_location:

automation:
  - alias: climatemonitor_template Update And Alarm Check
    id: climatemonitor_template_update_and_alarm_check
    triggers:
      - seconds: /1
        trigger: time_pattern
        id: time_pattern
      - entity_id: sensor.template_climatemonitor_template_alarm
        trigger: state
        id: state_change
    conditions: []
    actions:
      - choose:
          - conditions:
              - condition: trigger
                id: time_pattern
            sequence:
              - target:
                  entity_id: sensor.climatemonitor_template_last_update
                action: homeassistant.update_entity
                data: {}
          - conditions:
              - condition: trigger
                id: state_change
              - condition: template
                value_template: "{{ trigger.to_state.state != trigger.from_state.state }}"
            sequence:
              - data:
                  entity_id: "{{ trigger.entity_id }}"
                action: script.alarm_notifications
    mode: queued
