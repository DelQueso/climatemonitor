substitutions:
  name: "climatemonitor"
  friendly_name: "Climate Monitor"
  manufacturer: "delqueso"
esphome:
  name: "${name}"
  friendly_name: "${friendly_name}"
  name_add_mac_suffix: true
  project:
    name: "${manufacturer}.${name}"
http_request:
  verify_ssl: true
  buffer_size_rx: 2048
  buffer_size_tx: 2048
update:
  - platform: http_request
    name: Firmware Update
    source: https://github.com/${manufacturer}/${name}/releases/latest/download/${name}.manifest.json
esp32:
  board: esp32dev
  framework:
    type: esp-idf
ota:
- platform: http_request
wifi:
  power_save_mode: none
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    password: '12345678'
captive_portal:
logger:
  level: NONE
api: 
sensor:
  - platform: wifi_signal # Reports the WiFi signal strength/RSSI in dB
    name: "WiFi Signal dB"
    id: wifi_signal_db
    update_interval: 60s
    entity_category: "diagnostic"

  - platform: copy # Reports the WiFi signal strength in %
    source_id: wifi_signal_db
    name: "WiFi Signal Percent"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    entity_category: "diagnostic"
    device_class: "" 
  - platform: sht4x
    id: temperature_sensor    # Set id for the sensor
    temperature:
      name: Temperature
      force_update: true
    humidity:
      name: Relative Humidity
      force_update: true
    update_interval: 60s    # We control when to read data

# Define GPIO outputs
output:
- platform: gpio
  pin: GPIO18
  id: red_led_bottom

- platform: gpio
  pin: GPIO22
  id: green_led_top

- platform: gpio
  pin: GPIO19
  id: blue_led_bottom

- platform: gpio
  pin: GPIO21
  id: red_led_top

# Define leds
light:
- platform: binary
  id: red_led_error
  output: red_led_bottom
  name: Red LED Bottom

- platform: binary
  output: blue_led_bottom
  name: Blue LED Bottom

- platform: binary
  id: status_led_nok
  output: red_led_top
  name: Red LED Top
- platform: binary
  id: status_led_ok
  internal: true
  output: green_led_top

i2c:
  sda: GPIO14
  scl: GPIO13
  scan: true
  id: bus_a

      
# Connection status, door open, alarm handling
interval:
- interval: 1s
  then:
    if:
      condition:
        wifi.connected:
      then:
      - if:
          condition:
            api.connected:
          then:
          - light.turn_on:
              id: status_led_ok
              flash_length: 100ms
          - light.turn_off:
              id: status_led_nok
          else:
          - light.turn_on:
              id: status_led_nok
              flash_length: 100ms
          - light.turn_off:
              id: status_led_ok
      else:
      - light.turn_on:
          id: status_led_nok
          flash_length: 500ms
      - light.turn_off:
          id: status_led_ok
